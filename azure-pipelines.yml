variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/release')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  distPath: dist/datariomj/browser
  artifactName: WebApp
  ${{ if eq(variables['isMain'], true) }}:
    environment: prod
  ${{ else }}:
    environment: 'staging'

stages:
  - stage: Init
    jobs:
      - job: Init
        steps:
          - ${{ if eq(variables['isMain'], true) }}:
            - script: echo "##vso[task.setvariable variable=S3_BUCKET_ID;issecret=true]$(S3_BUCKET_ID)"
            - script: echo "##vso[task.setvariable variable=CLOUDFRONT_DISTRIBUTION_ID;issecret=true]$(CLOUDFRONT_DISTRIBUTION_ID)"
          - ${{ if eq(variables['isRelease'], true) }}:
            - script: echo "##vso[task.setvariable variable=S3_BUCKET_ID;issecret=true]$(STAGING_S3_BUCKET_ID)"
            - script: echo "##vso[task.setvariable variable=CLOUDFRONT_DISTRIBUTION_ID;issecret=true]$(STAGING_CLOUDFRONT_DISTRIBUTION_ID)"
          - checkout: self
            clean: true
            name: CheckoutRepo
            displayName: Checkout Repository
          - script: npm ci
            displayName: Run npm ci
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: /home/agent/.npm

  - stage: Lint
    dependsOn: Init
    jobs:
      - job: Lint
        steps:
          - script: npm ci
            displayName: Run npm install
          - script: npm run lint
            displayName: Run Angular lints
          - script: npm run lint:styles
            displayName: Run style lints

  - stage: Test
    dependsOn: Init
    jobs:
      - job: Test
        steps:
          - script: npm ci
            displayName: Run npm install
          - script: npm run e2e:ci -- --record --key $(CYPRESS_RECORD_KEY)
            displayName: "Run E2E tests"

  - stage: Build
    dependsOn: Init
    jobs:
      - job: Build
        steps:
          - script: npm ci
            displayName: Run npm install
          - script: npm run build:$(environment)
            displayName: "Run build"
          - publish: $(distPath)
            displayName: Publish Web App
            condition: eq(variables.isPR, false)
            artifact: $(artifactName)

  - stage: Deployment
    dependsOn:
      - Lint
      - Test
      - Build
    condition: and(ne(variables.isPR, true), or(eq(variables.isMain, true), eq(variables.isRelease, true)))
    jobs:
      - deployment: Deploy
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none
                - download: current
                  artifact: $(artifactName)
                - script: |
                    aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
                    aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
                    aws configure set region $(AWS_REGION)
                  displayName: Configure AWS CLI
                - script: aws s3 sync $(Pipeline.Workspace)/$(artifactName) s3://$(S3_BUCKET_ID)
                  displayName: Upload to S3
                - script: aws cloudfront create-invalidation --distribution-id $(CLOUDFRONT_DISTRIBUTION_ID) --paths '/*'
                  displayName: Invalidate CloudFront