variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/release')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  distPath: dist/datariomj/browser
  artifactName: WebApp
  npmConfigCache: $(Pipeline.Workspace)/.npm
  ${{ if eq(variables['isMain'], true) }}:
    environment: prod
  ${{ else }}:
    environment: 'staging'

stages:
  - stage: Init
    jobs:
      - job: Init
        steps:
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npmConfigCache)

          - script: npm ci
            displayName: Run npm ci

  - stage: Lint
    dependsOn: Init
    jobs:
      - job: Lint
        steps:
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npmConfigCache)

          - script: npm ci
            displayName: Run npm install
          
          - script: npm run lint
            displayName: Run Angular lints
          
          - script: npm run lint:styles
            displayName: Run style lints

          - script: |
              version=$(npm run changelog:version | tail -n 1 | tr -d '\n')
              echo "##vso[task.setvariable variable=version]$version"
              npm run generate:changelog:release
            displayName: Generate Changelog

  - stage: Test
    dependsOn: Init
    jobs:
      - job: Test
        steps:
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npmConfigCache)

          - script: npm ci
            displayName: Run npm install
          
          - script: npm run e2e:ci -- --record --key $(CYPRESS_RECORD_KEY)
            displayName: Run E2E tests

  - stage: Build
    dependsOn: Init
    jobs:
      - job: Build
        steps:
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npmConfigCache)

          - script: npm ci
            displayName: Run npm install
          
          - script: npm run build:$(environment)
            displayName: Run build
          
          - script: |
              mv $(distPath)/robots.prod.txt $(distPath)/robots.txt
            condition: eq(variables.isMain, true)
            displayName: Apply robots.txt
          
          - publish: $(distPath)
            displayName: Publish Web App
            condition: eq(variables.isPR, false)
            artifact: $(artifactName)

  - stage: Deployment
    dependsOn:
      - Lint
      - Test
      - Build
    condition: and(ne(variables.isPR, true), or(eq(variables.isMain, true), eq(variables.isRelease, true)))
    jobs:
      - deployment: Deploy
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "##vso[task.setvariable variable=targetS3BukcetId;issecret=true]$(S3_BUCKET_ID)"
                    echo "##vso[task.setvariable variable=targetCloudfrontDistributionId;issecret=true]$(CLOUDFRONT_DISTRIBUTION_ID)"
                  displayName: 'Add AWS Vars for Prod'
                  condition: eq(variables.isMain, true)
                - script: |
                    echo "##vso[task.setvariable variable=targetS3BukcetId;issecret=true]$(STAGING_S3_BUCKET_ID)"
                    echo "##vso[task.setvariable variable=targetCloudfrontDistributionId;issecret=true]$(STAGING_CLOUDFRONT_DISTRIBUTION_ID)"
                  displayName: 'Add AWS Vars for Staging'
                  condition: eq(variables.isRelease, true)
                - checkout: none
                - download: current
                  artifact: $(artifactName)
                - script: |
                    aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
                    aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
                    aws configure set region $(AWS_REGION)
                  displayName: Configure AWS CLI
                - script: aws s3 sync $(Pipeline.Workspace)/$(artifactName) s3://$(targetS3BukcetId)
                  displayName: Upload to S3
                - script: aws cloudfront create-invalidation --distribution-id $(targetCloudfrontDistributionId) --paths '/*'
                  displayName: Invalidate CloudFront

  - stage: Publish
    dependsOn:
      - Lint
      - Test
      - Build
    condition: and(ne(variables.isPR, true), eq(variables.isMain, true))
    jobs:
      - job: Publish
        steps:
          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npmConfigCache)
              
          - script: npm ci
            displayName: Run npm install

          - script: |
              version=$(npm run changelog:version | tail -n 1 | tr -d '\n')
              echo "##vso[task.setvariable variable=version]$version"
              npm run generate:changelog:release
            displayName: Generate Changelog

          - script: |
              gh release create $version --title "Release $version" --notes-file CHANGELOG.md
            displayName: Create GitHub Release
